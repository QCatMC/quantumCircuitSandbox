v1.4.2
  - Multi-target single qubit operators now handles 8+ targets
    by doing the simulation in 8 operator sized chunks to avoid
    computing overly large matricies. 

v1.4.1
  - stdbasis now returns sparse column vectors in order to allow
    the potential the simulation of larger spaces
  - isnat is now a public function

v1.4.0
  - QIR now includes the CC-U class of gates.

v1.3.2
  - bug fixes in single qubit parameterization functions. phaseamp, zyz, and
  Rn parameterizations are now consistent with the corresponding U2 constructors.
  The paramters themselves are also more logical. Angles are, for the most part,
   taken from [0,2pi) with the exception of the amplitude parameter, which
  is restricted to [0,pi/2].
  - QIRcU compilation now works (or works again).


v1.3.1
  - changed 'depth' to 'ndepth', for nesting depth. This was
  done to avoid confusion with circuit depth used in the cost/complexity
  sense.


v1.3.0
  - Many functions renamed to better conform to the octave
  style of all lowercase letters.
  - Printing circuits now clips to first and last 8 nodes
  to avoid lengthy, slow printing by default. Users can
  view the entire circuit by using the viewcircuit function
  on any circuit object.

v1.2.4
 - Documentation improvements

v1.2.3
 - Fixed QFT constructor

v1.2.2
 - Improved documentation for core functions and features.
 - Bug fixes in U(2) parameterization/construction functions.
    principal values for these functions are explicitly documented
    in the U2* functions.

v1.2.1
 - pTrace now works on state vectors.  Results are still given
   as density matrices.

v1.2.0
 - simulate accepts new options for automatic post processing
   as discussed in Issue #22.  Users can now specify the
   work space location and size to get traced out density
   matrices as output.  You can also specify a number of samples
   and get measured, classical output as either an integer
   or a binary vector.

v1.1.0
 - qcc and simulate now work with optional arguments given
   as name value pairs as discussed in Issue #21.  This means
   non-default calls are more verbose, but flexible. It will
   also be easier to add new options to these key functions as
   parameter parsing is done via the built-in parseparams.
 - the new top-level function measure lets the user get
   integer or binary results from quantum states by carrying
   out complete measurements in the standard basis.  The
   measure function works on vector states and density matrices.
   It also allows for repeated sampling of a state.

v1.0.0
 - Beta 1.0 Release.
 - Compiling to QASM should be considered non-deterministic at
   this point.  Circuit errors < 0.009 are not well tested
   nor supported.  The use of the parallel package for
   speeding up the QASM compiler is highly recommended if
   your running a multi-core machine.

v0.9.9
 - the use of the parallel package is now optional.  However,
    noticeable speedups can be achieved when it's installed
    and loaded.
 - continued performance tweaks for the SK compiler.
 - fixed a serious bug in @seq/circ2mat

v0.9.8
 - skalgo now utilizes the octave-forge package parallel
   to speedup the table search done by findclosest.

v0.9.7
 - Performance enhancements and bug fixes
 - Users can now use QFT(n) to construct an n qubit
   quantum fourier transform circuit.

v0.9.6
 - Circuits are now allow sub-circuit selection via indexing
   the step and depth.  Step indexes can be any list of positive
   natural numbers in any order assuming they're withing the bounds
   with respect to the given depth.  This behavior is analogous to
   matrix/cell array selection in Octave.

v0.9.5
 - Bug fix in QIR. QIRsingle would cause crash the simulator
   if the user didn't pass targets in descending order.
 - examples updated to reflect v0.9.4 circuit construction patterns.

v0.9.4
 - QIR circuits can now be constructed in an Octave native way by using
   the QIR factory function along with horzcat, i.e. [a,b,...].  Thus,
   top level circuits can be constructed like vectors without the need to
   compile from circuit descriptors. Descriptor parsing will still be
   available, but is no longer the preferred method for circuit construction.
 - Circuits and gates are now reversible via ctranspose. So A' is the
   reverse of gate or circuit A. This should work for all circuit languages.
 - Version number was incremented twice as this resolves two key features
   needed for the 1.0 release: horzcat and ctranspose.

v.0.9.2
 - qcc's behavior changed.  No arguments will compile to one step down the
   hierarchy.  Supplying just a precision compiles to QASM with that precision
   When supplying two arguments, the target language should come first.
 - modified UZERO in uzero.mat so that the identity matrix corresponds
   to the sequence {"I"}. This means approximations of global phase shifts
   will introduce I to circuits.

v0.9.1
 - bug fixes

v0.9.0
 - entire package cleaned up for qcs alpha release (v0.9.0)
 - Initial QIR circuits implemented. Includes Fredkin, Toffoli, Swap,
  and C-U operators
 - All types of circuits, except cell array descriptors, can now be simulated!
 - qcc now defaults to QIR rather than QASM
 - abstract (non QASM,QIASM,QIR) classes used for better code reuse across
  across the circuit type hierarchy
 - bug fixes and additional unit tests

v0.5.4
 - project rename to qcs, Quantum Circuit Sandbox

v0.5.3
 - buildCircuit now allows user specified targets and precision, but no longer
   supports user specified sizes.
 - some preliminary testing on QIR. Bugs probable.

v0.5.2
 - compile no longer loads Solovay-Kitaev data when the algorithm is not going
   to be run.

v0.5.1
 - performance tweaks
 - more robust testing
 - cleanup old, unused files

v0.5.0
 - Added Solovay-Kitave compiler for QIASM->QASM.  You may not specify
    arbitrary unitaries in PhaseAmp,Rn,or ZYZ parameterization. These
    are then compiled to a QASM circuits which approximates the QIASM
    circuit up to a global phase.

v0.4.5
 - QIASM layer added to QASM. Users now utilize the abstract 'buildCircuit'
   to construct circuits and need not worry about QIASM vs QASM.  However,
   non-QASM operators are not currently supported.
 - Some housekeeping of files was done.

v0.4.0
 - Renamed in order to rename circuit objects as QASM* (Quantum
    Assembly). This is prepartion for more abstract, high-order
    circuits with compilation down to QASM.
 - Added functions for computing unitary parameters and unitaries from
   parameters.  Supported parameterizations are: Phase-Amplitude, Rotation,
   Z-Y-Z.
 - Added operr which computes the difference, as induced by the operator norm,
   between two operators.

v0.3.0
 - Complete rewrite with EDSL focus:
 -- Circuit descriptors are compiled to circuit objects via buildCircuit
    function
 -- Simulation of circuit objects can be carried out via simulate function
 -- Simulation can be done w.r.t. nested depth and time steps thus allowing
    fine or coarse grained step by step simulation
 - See examples folder for example usage and discussion of various features.

v0.2.0
 - Circuit evaluation now allows pure-state vector inputs
 - Circuit evaluation now utilizes time step sequences. Still defaults
     to the complete circuit. Single time values will only evaluate that step.
     any sequence (must be squence) in [1,|circuit|] can now be evaluated by
     passing that sequnce as the time argument.

v0.1.2
 - Evaluate Circuits operating on pure-states (vector form) using the
    elementary gates I,X,Z,Y,S,T,H,CNot.
 - Complete and partial measurements in the stantard basis
 - Input to n qubit circuit can be n bit binary number as row vector
    or integer from [0,2^n).
 - Circuits can be partial evaluated from step 1 to t<|circuit|.
 - Circuits described by simple cell array which is interpreted by evalCircuit
 - Can compute density operator form of pure-states
 - Can compute partial trace of density operators
 - Checked version of key operations evaluated pre-conditions of inputs where
   unchecked versions do not.
 - Easy computation of standard basis vectors and matrix representations of
   elementary operators.
